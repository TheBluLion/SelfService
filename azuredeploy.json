{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "baseResourceName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The base name to use for the resources that will be provisioned."
      }
    },
      "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
      "sku": {
        "type": "string",
        "defaultValue": "Free",
        "allowedValues": [
          "pergb2018",
          "Free",
          "Standalone",
          "PerNode",
          "Standard",
          "Premium"
        ],
        "metadata": {
          "description": "Pricing tier: perGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium), which are not available to all customers."
        }
      },
      "m365AdminUpn": {
        "type": "string",
        "metadata": {
          "description": "M365 admin username that has rights to grant Teams policies."
        }
      },

      "m365AdminPassword": {
        "type": "securestring",
        "defaultValue": "",
        "metadata": {
          "description": "M365 admin password"
        }
      },
      "samplePowerShellRunbookLocation": {
        "type": "string",
        "metadata": {
          "description": "The URL to the sample Runbook you want to deploy."
        },
        "defaultValue": "https://raw.githubusercontent.com/TheBluLion/SelfService/gcc/"
        }
    },
    "variables": {
      //workspacename includes a unique string to minimize duplicate name errors.
      "workspaceName": "[concat(parameters('baseResourceName'),uniqueString(parameters('baseResourceName')))]",
      "automationAccountName": "[concat(parameters('baseResourceName'),'Acct')]",
      "serviceBusNamespaceName": "[concat(parameters('baseResourceName'),'SB')]",
      "serviceBusQueueName": "batch",
      "dataRetention": 7,
      "_artifactsLocation": "[parameters('samplePowerShellRunbookLocation')]",
      "defaultSASKeyName": "RootManageSharedAccessKey",
      "authRuleResourceId": "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusNamespaceName'), variables('defaultSASKeyName'))]"
    },
    "resources": [
      {
        "type": "Microsoft.OperationalInsights/workspaces",
        "apiVersion": "2020-08-01",
        "name": "[variables('workspaceName')]",
        "location": "[parameters('location')]",
        "properties": {
          "sku": {
            "name": "[parameters('sku')]"
          },
          "retentionInDays": "[variables('dataRetention')]",
          "features": {
            "searchVersion": 1,
            "legacy": 0
          }
        }
      },
      {
        "type": "Microsoft.Automation/automationAccounts",
        "apiVersion": "2019-06-01",
        "name": "[variables('automationAccountName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[variables('workspaceName')]"
        ],
        "properties": {
          "sku": {
            "name": "Basic"
          }
        },
        "resources": [
          {
            "type": "runbooks",
            "apiVersion": "2018-06-30",
            "name": "UpgradeToTeamsOnly",
            "location": "[parameters('location')]",
            "dependsOn": [
              "[variables('automationAccountName')]"
            ],
            "properties": {
              "runbookType": "PowerShell",
              "logProgress": "false",
              "logVerbose": "false",
              "description": "Upgrades individual users to Teams Only using Grant-CsTeamsUpgradePolicy",
              "publishContentLink": {
                "uri": "[uri(variables('_artifactsLocation'), 'Scripts/TeamsOnly.ps1')]",
                "version": "1.0.0.0"
              }
            }
          },
          {
            "type": "runbooks",
            "apiVersion": "2018-06-30",
            "name": "BatchUpgradeToTeamsOnly",
            "location": "[parameters('location')]",
            "dependsOn": [
              "[variables('automationAccountName')]"
            ],
            "properties": {
              "runbookType": "PowerShell",
              "logProgress": "false",
              "logVerbose": "false",
              "description": "Batch Upgrades lists of users to Teams Only using New-CSBatchPolicyAssignmentOperation",
              "publishContentLink": {
                "uri": "[uri(variables('_artifactsLocation'), 'Scripts/BatchUpgradeToTeamsOnly.ps1')]",
                "version": "1.0.0.0"
              }
            }
          },
          {
            "name": "MicrosoftTeams",
            "type": "modules",
            "apiVersion": "2015-10-31",
            "location": "[parameters('location')]",
            "dependsOn": [
              "[variables('automationAccountName')]"
            ],
            "properties": {
              "contentLink": {
                "uri": "https://devopsgallerystorage.blob.core.windows.net:443/packages/microsoftteams.1.1.6.nupkg"
              }
            }
          },
          {
            "name": "Office 365 admin",
            "type": "credentials",
            "apiVersion": "2015-10-31",
            "dependsOn": [
              "[variables('automationAccountName')]"
            ],
            "properties": {
              "userName": "[parameters('m365AdminUpn')]",
              "password": "[parameters('m365AdminPassword')]",
              "description": "Credentials with admin rights to grant Skype for Business and Teams policies."
            }
          }
        ]
      },
      {
        "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
        "apiVersion": "2020-08-01",
        "name": "[concat(variables('workspaceName'), '/' , 'Automation')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[variables('workspaceName')]",
          "[variables('automationAccountName')]"
        ],
        "properties": {
          "resourceId": "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
        }
      },
      {
        "apiVersion": "2017-04-01",
        "name": "[variables('serviceBusNamespaceName')]",
        "type": "Microsoft.ServiceBus/Namespaces",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Basic"
        },
        "properties": {},
        "resources": [
          {
            "apiVersion": "2017-04-01",
            "name": "[variables('serviceBusQueueName')]",
            "type": "Queues",
            "dependsOn": [
              "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
            ],
            "properties": {
              "lockDuration": "PT5M",
              "maxSizeInMegabytes": 1024,
              "requiresDuplicateDetection": false,
              "requiresSession": false,
              "deadLetteringOnMessageExpiration": false,
              "duplicateDetectionHistoryTimeWindow": "PT10M",
              "maxDeliveryCount": 10,
              "enablePartitioning": false,
              "enableExpress": false
            }
          },
          {
            "apiVersion": "2017-04-01",
            "name": "[variables('defaultSASKeyName')]",
            "type": "authorizationRules",
            "dependsOn": [
              "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
            ],
            "location": "[parameters('location')]",
            "properties": {
              "rights": [
                    "Listen",
                    "Manage",
                    "Send"
              ]
            }
          }
        ]
      },
      {
        "type": "Microsoft.Web/connections",
        "name": "servicebus",
        "apiVersion": "2016-06-01",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[variables('authRuleResourceId')]"
        ],
        "properties": {
          "displayName": "servicebus",
          "customParameterValues": {},
          "api": {
            "id": "[concat('/subscriptions/',  subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location') , '/managedApis/servicebus')]"
          },
          "parameterValues": {
            "connectionString": "[listKeys(variables('authRuleResourceId'), '2015-08-01').primaryConnectionString]"
          }
        }
      },
      {
        "type": "Microsoft.Web/connections",
        "name": "automationaccount",
        "apiVersion": "2018-07-01-preview",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
        ],
        "properties": {
          "displayName": "automationaccount",
          "customParameterValues": {},
          "api": {
            "id": "[concat('/subscriptions/',  subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location') , '/managedApis/azureautomation')]"
          },
          "parameterValues": {
            "token:TenantId": "[subscription().tenantId]",
            "token:clientId": "7ab7862c-4c57-491e-8a45-d52a7e023983",
            "token:grantType": "client_credentials",
            "token:clientSecret": "placeholder"
          }
        }
      },
      {
        "type": "Microsoft.Logic/workflows",
        "apiVersion": "2017-07-01",
        "name": "PowerAppTrigger",
        "location": "[parameters('location')]",
        "properties": {
            "state": "Enabled",
            "definition": {
                "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                "contentVersion": "1.0.0.0",
                "parameters": {
                    "$connections": {
                        "defaultValue": {},
                        "type": "Object"
                    }
                },
                "triggers": {
                    "manual": {
                        "type": "Request",
                        "kind": "Http",
                        "inputs": {
                            "schema": {
                                "properties": {
                                    "MigrationSchedule": {
                                        "type": "string"
                                    },
                                    "PolicyName": {
                                        "type": "string"
                                    },
                                    "upn": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "actions": {
                    "Condition": {
                        "actions": {
                            "Check_for_MigrationSchedule": {
                                "actions": {
                                    "Send_message": {
                                        "runAfter": {},
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "body": {
                                                "ContentData": "@{base64(concat('{','\n','  \"upn\": \"',outputs('UserPrincipalName'),'\",','\n','  \"upgradepolicy\": \"',outputs('PolicyName'),'\"','\n','}'))}",
                                                "ContentType": "Application/json"
                                            },
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "path": "/@{encodeURIComponent(encodeURIComponent('batch'))}/messages",
                                            "queries": {
                                                "systemProperties": "None"
                                            }
                                        }
                                    }
                                },
                                "runAfter": {},
                                "else": {
                                    "actions": {
                                        "Condition_2": {
                                            "actions": {
                                                "Send_an_email_(V2)_2": {
                                                    "runAfter": {},
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": {
                                                            "Body": "<p>Migration to TeamsOnly mode complete</p>",
                                                            "Subject": "Migration to TeamsOnly mode complete",
                                                            "To": "@{outputs('UserPrincipalName')}"
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['office365']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/v2/Mail"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Get_job_output": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Send_an_email_(V2)_3": {
                                                        "runAfter": {},
                                                        "type": "ApiConnection",
                                                        "inputs": {
                                                            "body": {
                                                                "Body": "<p>TeamsOnly Migration for <br>\nJobid: @{outputs('Create_job')?['body/properties/jobId']}<br>\nError:<br>\n@{body('Get_job_output')?['body']}</p>",
                                                                "Subject": "Migration failed: Action required",
                                                                "To": "@{outputs('UserPrincipalName')}"
                                                            },
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['office365']['connectionId']"
                                                                }
                                                            },
                                                            "method": "post",
                                                            "path": "/v2/Mail"
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [{
                                                        "equals": [
                                                            "@trim(outputs('Get_job_output')?['body'])",
                                                            "Success"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Create_job": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "properties": {
                                                        "parameters": {
                                                            "Policy": "@{outputs('PolicyName')}",
                                                            "upn": "@{outputs('UserPrincipalName')}"
                                                        }
                                                    }
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureautomation']['connectionId']"
                                                    }
                                                },
                                                "method": "put",
                                                "path": "[concat('/subscriptions/@{encodeURIComponent(''', subscription().id,''')}/resourceGroups/@{encodeURIComponent(''',resourceGroup().name,''')}/providers/Microsoft.Automation/automationAccounts/@{encodeURIComponent(''',variables('automationAccountName'),''')}/jobs')]",
                                                "queries": {
                                                    "runbookName": "UpgradeToTeamsOnly",
                                                    "wait": true,
                                                    "x-ms-api-version": "2015-10-31"
                                                }
                                            }
                                        },
                                        "Get_job_output": {
                                            "runAfter": {
                                                "Create_job": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureautomation']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "[concat('/subscriptions/@{encodeURIComponent(''', subscription().id,''')}/resourceGroups/@{encodeURIComponent(''',resourceGroup().name,''')}/providers/Microsoft.Automation/automationAccounts/@{encodeURIComponent(''',variables('automationAccountName'),''')}/jobs/@{encodeURIComponent(body(''Create_job'')?[''properties'']?[''jobId''])}/output')]",
                                                "queries": {
                                                    "x-ms-api-version": "2015-10-31"
                                                }
                                            }
                                        }
                                    }
                                },
                                "expression": {
                                    "and": [{
                                            "equals": [
                                                "@triggerBody()?['MigrationSchedule']",
                                                "Migrate Friday"
                                            ]
                                        }
                                    ]
                                },
                                "type": "If"
                            }
                        },
                        "runAfter": {
                            "Send_approval_email": [
                                "Succeeded"
                            ]
                        },
                        "else": {
                            "actions": {
                                "Send_an_email_(V2)": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "Body": "<p>your request was rejected</p>",
                                            "Subject": "Teams migration request rejected by manager",
                                            "To": "@{outputs('UserPrincipalName')}"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['office365']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/v2/Mail"
                                    }
                                }
                            }
                        },
                        "expression": {
                            "and": [{
                                    "equals": [
                                        "@body('Send_approval_email')",
                                        "Approve"
                                    ]
                                }
                            ]
                        },
                        "type": "If"
                    },
                    "Get_manager_(V2)": {
                        "runAfter": {
                            "PolicyName": [
                                "Succeeded"
                            ]
                        },
                        "type": "ApiConnection",
                        "inputs": {
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['office365users']['connectionId']"
                                }
                            },
                            "method": "get",
                            "path": "/codeless/v1.0/users/@{encodeURIComponent(outputs('UserPrincipalName'))}/manager"
                        }
                    },
                    "MigrationSchedule": {
                        "runAfter": {
                            "UserPrincipalName": [
                                "Succeeded"
                            ]
                        },
                        "type": "Compose",
                        "inputs": "@triggerBody()?['MigrationSchedule']"
                    },
                    "PolicyName": {
                        "runAfter": {
                            "MigrationSchedule": [
                                "Succeeded"
                            ]
                        },
                        "type": "Compose",
                        "inputs": "@triggerBody()?['PolicyName']"
                    },
                    "Send_approval_email": {
                        "runAfter": {
                            "Get_manager_(V2)": [
                                "Succeeded"
                            ]
                        },
                        "type": "ApiConnectionWebhook",
                        "inputs": {
                            "body": {
                                "Message": {
                                    "HideHTMLMessage": false,
                                    "Importance": "Normal",
                                    "Options": "Approve, Reject",
                                    "ShowHTMLConfirmationDialog": false,
                                    "Subject": "APPROVAL REQUIRED: Teams upgrade for @{outputs('UserPrincipalName')}",
                                    "To": "@body('Get_manager_(V2)')?['mail']"
                                },
                                "NotificationUrl": "@{listCallbackUrl()}"
                            },
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['office365']['connectionId']"
                                }
                            },
                            "path": "[concat('/approvalmail/',subscription().id)]"
                        }
                    },
                    "UserPrincipalName": {
                        "runAfter": {
                            "admin_notification_email": [
                                "Succeeded"
                            ]
                        },
                        "type": "Compose",
                        "inputs": "@triggerBody()?['upn']"
                    },
                    "admin_notification_email": {
                        "runAfter": {},
                        "type": "Compose",
                        "inputs": "update@contoso.com"
                    }
                },
                "outputs": {}
            },
            "parameters": {
                "$connections": {
                    "value": {
                        "azureautomation": {
                            "connectionId": "[concat('/subscriptions/',subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/azureautomation')]",
                            "connectionName": "azureautomation",
                            "id": "[concat('/subscriptions/',subscription().id,'/providers/Microsoft.Web/locations/',parameters('location'),'/managedApis/azureautomation')]"
                        },
                        "office365": {
                            "connectionId": "[concat('/subscriptions/',subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/office365')]",
                            "connectionName": "office365",
                            "id": "[concat('/subscriptions/',subscription().id,'/providers/Microsoft.Web/locations/',parameters('location'),'/managedApis/office365')]"
                        },
                        "office365users": {
                            "connectionId": "[concat('/subscriptions/',subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/office365users')]",
                            "connectionName": "office365users",
                            "id": "[concat('/subscriptions/',subscription().id,'/providers/Microsoft.Web/locations/',parameters('location'),'/managedApis/office365users')]"
                        },
                        "servicebus": {
                            "connectionId": "[concat('/subscriptions/',subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/servicebus')]",
                            "connectionName": "servicebus",
                            "id": "[concat('/subscriptions/',subscription().id,'/providers/Microsoft.Web/locations/',parameters('location'),'/managedApis/servicebus')]"
                        }
                    }
                }
            }
        }
      },
      {
        "properties": {
            "state": "Enabled",
            "definition": {
                "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                "actions": {
                    "Condition": {
                        "type": "If",
                        "expression": {
                            "and": [{
                                    "startsWith": [
                                        "@trim(body('Get_job_output'))",
                                        "Success"
                                    ]
                                }
                            ]
                        },
                        "actions": {
                            "For_each_2": {
                                "type": "Foreach",
                                "foreach": "@body('Get_messages_from_a_queue_(peek-lock)')",
                                "actions": {
                                    "Complete_the_message_in_a_queue": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                                                }
                                            },
                                            "method": "delete",
                                            "path": "/@{encodeURIComponent(encodeURIComponent('batch'))}/messages/complete",
                                            "queries": {
                                                "lockToken": "@items('For_each_2')?['LockToken']",
                                                "queueType": "Main",
                                                "sessionId": ""
                                            }
                                        },
                                        "runAfter": {}
                                    }
                                },
                                "runAfter": {}
                            }
                        },
                        "runAfter": {
                            "Get_job_output": [
                                "Succeeded"
                            ]
                        },
                        "else": {
                            "actions": {
                                "Compose_2": {
                                    "type": "Compose",
                                    "inputs": "placeholder for retry logic",
                                    "runAfter": {}
                                }
                            }
                        }
                    },
                    "Create_job": {
                        "type": "ApiConnection",
                        "inputs": {
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['azureautomation']['connectionId']"
                                }
                            },
                            "method": "put",
                            "body": {
                                "properties": {
                                    "parameters": {
                                        "webhookdata": "@{outputs('batchusers')}"
                                    }
                                }
                            },
                            "path": "[concat('/subscriptions/@{encodeURIComponent(''', subscription().subscriptionId,''')}/resourceGroups/@{encodeURIComponent(''',resourceGroup().name,''')}/providers/Microsoft.Automation/automationAccounts/@{encodeURIComponent(''',variables('automationAccountName'),''')}/jobs')]",
                            "queries": {
                                "x-ms-api-version": "2015-10-31",
                                "runbookName": "BatchUpgradeToTeamsOnly",
                                "wait": true
                            }
                        },
                        "runAfter": {
                            "batchusers": [
                                "Succeeded"
                            ]
                        },
                        "runtimeConfiguration": {
                            "staticResult": {
                                "staticResultOptions": "Disabled",
                                "name": "Create_job0"
                            }
                        }
                    },
                    "For_each": {
                        "type": "Foreach",
                        "foreach": "@body('Get_messages_from_a_queue_(peek-lock)')",
                        "actions": {
                            "Append_to_array_variable": {
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                    "name": "Batchusers",
                                    "value": "@body('Parse_JSON')?['upn']"
                                },
                                "runAfter": {
                                    "Parse_JSON": [
                                        "Succeeded"
                                    ]
                                }
                            },
                            "Compose": {
                                "type": "Compose",
                                "inputs": "@items('For_each')?['ContentData']",
                                "runAfter": {}
                            },
                            "Parse_JSON": {
                                "type": "ParseJson",
                                "inputs": {
                                    "content": "@base64ToString(outputs('Compose'))",
                                    "schema": {
                                        "properties": {
                                            "upgradepolicy": {
                                                "type": "string"
                                            },
                                            "upn": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "runAfter": {
                                    "Compose": [
                                        "Succeeded"
                                    ]
                                }
                            }
                        },
                        "runAfter": {
                            "Initialize_variable": [
                                "Succeeded"
                            ]
                        }
                    },
                    "Get_job_output": {
                        "type": "ApiConnection",
                        "inputs": {
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['azureautomation']['connectionId']"
                                }
                            },
                            "method": "get",
                            "path": "[concat('/subscriptions/@{encodeURIComponent(''', subscription().id,''')}/resourceGroups/@{encodeURIComponent(''',resourceGroup().name,''')}/providers/Microsoft.Automation/automationAccounts/@{encodeURIComponent(''',variables('automationAccountName'),''')}/jobs/@{encodeURIComponent(body(''Create_job'')?[''properties'']?[''jobId''])}/output')]",
                            "queries": {
                                "x-ms-api-version": "2015-10-31"
                            }
                        },
                        "runAfter": {
                            "Create_job": [
                                "Succeeded"
                            ]
                        }
                    },
                    "Get_messages_from_a_queue_(peek-lock)": {
                        "type": "ApiConnection",
                        "inputs": {
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                                }
                            },
                            "method": "get",
                            "path": "/@{encodeURIComponent(encodeURIComponent('batch'))}/messages/batch/peek",
                            "queries": {
                                "maxMessageCount": 175,
                                "queueType": "Main"
                            }
                        },
                        "runAfter": {}
                    },
                    "Initialize_variable": {
                        "type": "InitializeVariable",
                        "inputs": {
                            "variables": [{
                                    "name": "Batchusers",
                                    "type": "array"
                                }
                            ]
                        },
                        "runAfter": {
                            "Get_messages_from_a_queue_(peek-lock)": [
                                "Succeeded"
                            ]
                        }
                    },
                    "batchusers": {
                        "type": "Compose",
                        "inputs": "@variables('Batchusers')",
                        "runAfter": {
                            "For_each": [
                                "Succeeded"
                            ]
                        }
                    }
                },
                "parameters": {
                    "$connections": {
                        "defaultValue": {},
                        "type": "Object"
                    }
                },
                "triggers": {
                    "Recurrence": {
                        "type": "Recurrence",
                        "recurrence": {
                            "frequency": "Week",
                            "interval": 1,
                            "schedule": {
                                "weekDays": [
                                    "Friday"
                                ],
                                "hours": [
                                    "18"
                                ],
                                "minutes": [
                                    0
                                ]
                            }
                        }
                    }
                },
                "contentVersion": "1.0.0.0",
                "outputs": {},
                "staticResults": {
                    "Create_job0": {
                        "status": "Succeeded",
                        "outputs": {
                            "headers": {},
                            "statusCode": "OK"
                        }
                    }
                }
            },
            "parameters": {
                "$connections": {
                    "value": {
                        "servicebus": {
                            "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/',parameters('location'), '/managedApis/', 'servicebus')]",
                            "connectionId": "[resourceId('Microsoft.Web/connections', 'servicebus')]",
                            "connectionName": "servicebus"
                        },
                        "azureautomation": {
                            "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/', 'azureautomation')]",
                            "connectionId": "[resourceId('Microsoft.Web/connections', 'automationaccount')]",
                            "connectionName": "automationaccount"
                        }
                    }
                }
            }
        },
        "name": "BatchProcessingSchedule",
        "type": "Microsoft.Logic/workflows",
        "location": "[parameters('location')]",
        "tags": {
            "displayName": "LogicApp"
        },
        "apiVersion": "2016-06-01",
        "dependsOn": [
            "[resourceId('Microsoft.Web/connections', 'servicebus')]",
            "[resourceId('Microsoft.Web/connections', 'automationaccount')]"
        ]
     }
    ]
  }